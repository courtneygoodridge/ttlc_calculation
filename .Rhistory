dat <- cbind(dat, steeringonsetcoords)
# Notes: radians conversion = (variable / 180 *pi)
"calculating computed heading"
dat <- dat %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::mutate(lineWorldYaw = StartWorldYaw - heading) %>%
dplyr::mutate(ComputedHeading = abs(lineWorldYaw - ThreshWorldYaw))
for (i in 1:length(dat$ComputedHeading)){
if (dat$ComputedHeading[i] > 180){
dat$ComputedHeading[i] <- dat$ComputedHeading[i] - 360
}
}
dat <- dat %>%
dplyr::mutate(ComputedHeading = abs(ComputedHeading)) %>%
dplyr::mutate(ComputedHeading_radians = ComputedHeading / 180 * pi)
dat %>%
dplyr::group_by(heading) %>%
dplyr::summarise(meancomputedheading = mean(ComputedHeading)) %>%
dplyr::mutate(heading_diff = meancomputedheading - heading)
dat <- dat %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::mutate(a = (ThreshWorld_x - StartWorld_x)^2 + (ThreshWorld_z - StartWorld_z)^2) %>%
dplyr::mutate(hypotenuse = sqrt(a))
"computing lane position"
dat <- dat %>%
dplyr::mutate(lane_position = sin(ComputedHeading_radians) * hypotenuse)
lane_position <- dat %>%
dplyr::select(ppid_trialn, lane_position)
magnitudedata <- merge(magnitudedata, lane_position, by = "ppid_trialn")
"creating trial ID tag"
trueresponses <- magnitudedata$ppid_trialn
trueresponses <- as.vector(trueresponses)
"creating dataframe for true and false responses"
'%!in%' <- function(x,y)!('%in%'(x,y))
true_responses <- dplyr::filter(linevisibletimecoursedata, ppid_trialn %in% trueresponses)
false_responses <- dplyr::filter(linevisibletimecoursedata, ppid_trialn %!in% trueresponses)
"early responses ID added to timecourse"
responses_id <- magnitudedata %>%
dplyr::select(ppid_trialn, EarlyResponses, FirstSteeringTime)
true_responses <- merge(true_responses, responses_id, by = "ppid_trialn")
theme_plot <-   theme(axis.title.x = element_text(size = 15), axis.text.x = element_text(size = 15), axis.title.y = element_text(size = 15), axis.text.y = element_text(size = 15), title = element_text(size = 12), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
select_trial <- function(df){
random_id <- sample(df$ppid_trialn, 1) # select random trial id
trial <- df %>%
dplyr::filter(ppid_trialn == random_id) # filter all trials apart from selected trial
return(trial)
}
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 18), axis.text.x = element_text(size = 18), axis.title.y = element_text(size = 18), axis.text.y = element_text(size = 18), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 18, face = "bold")) +
ylab("Yaw Rate Change (degrees/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(plot.title = element_text(size = 18, face = "bold"), axis.title.x = element_text(size = 18), axis.text.x = element_text(size = 18), axis.title.y = element_text(size = 18), axis.text.y = element_text(size = 18), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 18, face = "bold")) +
ylab("Yaw Rate Change (degrees/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 18), axis.text.x = element_text(size = 18), axis.title.y = element_text(size = 18), axis.text.y = element_text(size = 18), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate Change (degrees/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 18), axis.text.x = element_text(size = 18), axis.title.y = element_text(size = 18), axis.text.y = element_text(size = 18), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate Change (degrees/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A")
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 18), axis.text.x = element_text(size = 18), axis.title.y = element_text(size = 18), axis.text.y = element_text(size = 18), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate Change (degrees/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 15), axis.text.x = element_text(size = 15), axis.title.y = element_text(size = 15), axis.text.y = element_text(size = 15), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate Change (degrees/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate Change (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(EarlyResponses == FALSE) %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR), alpha = 0.4, colour = "red") +
geom_line(aes(x = timestamp, y = diff_YR_smooth)) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = FirstSteeringTime - 0.1, xend = FirstSteeringTime + 0.1, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
geom_vline(aes(xintercept = FirstSteeringTime)) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("A") +
ggsave('example_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(false_responses %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR)) +
geom_line(aes(x = timestamp, y = diff_YR_smooth), alpha = 0.4, colour = "red") +
geom_segment(aes(x = 0.35, xend = 0.55, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = 0.35, xend = 0.55, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ggsave('example_non_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(false_responses %>%
dplyr::group_by(ppid_trialn) %>%
dplyr::filter(abs(heading) == 2) %>%
select_trial()) +
geom_line(aes(x = timestamp, y = diff_YR)) +
geom_line(aes(x = timestamp, y = diff_YR_smooth), alpha = 0.4, colour = "red") +
geom_segment(aes(x = 0.35, xend = 0.55, y = 0.04, yend = 0.04), colour = "black", size = 0.2, alpha = 0.4) +
geom_segment(aes(x = 0.35, xend = 0.55, y = 0.02, yend = 0.02), colour = "black", size = 0.2, alpha = 0.4) +
ylab("Yaw Rate (°/s)") +
xlab("Time (s)") +
ylim(-0.3, 0.5) +
ggtitle("B") +
theme(axis.title.x = element_text(size = 13), axis.text.x = element_text(size = 13), axis.title.y = element_text(size = 13), axis.text.y = element_text(size = 13), title = element_text(size = 18), legend.title = element_text(size = 15), legend.text = element_text(size = 15), panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), plot.title = element_text(size = 20, face = "bold")) +
ggsave('example_non_bell_curve.png', plot = last_plot(), width = 10, height = 7, units = 'cm', dpi = 300, type = 'cairo')
ggplot(false_responses %>%
dplyr::filter(frame <= 150) %>%
dplyr::group_by(ppid_trialn), mapping = aes(x = rotatedX, y = rotatedZ, col = as.factor(heading))) +
geom_path(aes(group = .group), alpha = 0.5) +
geom_path(trajectory, mapping = aes(x = roadX, y = roadZ), linetype = "dashed", col = "black") +
geom_vline(aes(xintercept = 0), size = 1) +
facet_wrap(~ heading, ncol = 4, labeller = labeller(heading = heading.labs)) +
scale_colour_manual(values = wes_palette("Rushmore1")[2:5]) +
theme(legend.position = "none", strip.text.x = element_text(size = 12), plot.title = element_text(size = 15, face = "bold")) +
ylab("z (m)") +
xlab("x (m)") +
xlim(-0.8, 0.8) +
scale_y_continuous(expand = c(0, 0)) +
theme_plot +
theme(plot.title = element_text(size = 20, face = "bold")) +
ggtitle("B")
"creating trial ID tag"
trueresponses <- magnitudedata$ppid_trialn
trueresponses <- as.vector(trueresponses)
"creating dataframe for true and false responses"
'%!in%' <- function(x,y)!('%in%'(x,y))
true_responses <- dplyr::filter(linevisibletimecoursedata, ppid_trialn %in% trueresponses)
false_responses <- dplyr::filter(linevisibletimecoursedata, ppid_trialn %!in% trueresponses)
"early responses ID added to timecourse"
responses_id <- magnitudedata %>%
dplyr::select(ppid_trialn, EarlyResponses, FirstSteeringTime)
true_responses <- merge(true_responses, responses_id, by = "ppid_trialn")
heading.labs <- c("0.5" = "0.5°", "1" = "1.0°", "1.5" = "1.5°", "2" = "2.0°")
ggplot(false_responses %>%
dplyr::filter(frame <= 150) %>%
dplyr::group_by(ppid_trialn), mapping = aes(x = rotatedX, y = rotatedZ, col = as.factor(heading))) +
geom_path(aes(group = .group), alpha = 0.5) +
geom_path(trajectory, mapping = aes(x = roadX, y = roadZ), linetype = "dashed", col = "black") +
geom_vline(aes(xintercept = 0), size = 1) +
facet_wrap(~ heading, ncol = 4, labeller = labeller(heading = heading.labs)) +
scale_colour_manual(values = wes_palette("Rushmore1")[2:5]) +
theme(legend.position = "none", strip.text.x = element_text(size = 12), plot.title = element_text(size = 15, face = "bold")) +
ylab("z (m)") +
xlab("x (m)") +
xlim(-0.8, 0.8) +
scale_y_continuous(expand = c(0, 0)) +
theme_plot +
theme(plot.title = element_text(size = 20, face = "bold")) +
ggtitle("B")
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(false_responses %>%
dplyr::filter(frame <= 150) %>%
dplyr::group_by(ppid_trialn), mapping = aes(x = rotatedX, y = rotatedZ, col = as.factor(heading))) +
geom_path(aes(group = .group), alpha = 0.5) +
geom_path(trajectory, mapping = aes(x = roadX, y = roadZ), linetype = "dashed", col = "black") +
geom_vline(aes(xintercept = 0), size = 1) +
facet_wrap(~ heading, ncol = 4, labeller = labeller(heading = heading.labs)) +
scale_colour_manual(values = wes_palette("Rushmore1")[2:5]) +
theme(legend.position = "none", strip.text.x = element_text(size = 12), plot.title = element_text(size = 15, face = "bold")) +
ylab("z (m)") +
xlab("x (m)") +
xlim(-0.8, 0.8) +
scale_y_continuous(expand = c(0, 0)) +
theme_plot +
theme(plot.title = element_text(size = 20, face = "bold")) +
ggtitle("B") +
ggsave('all_invalid_trajectories.png', plot = last_plot(), width = 22, height = 8, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(false_responses %>%
dplyr::filter(frame <= 150) %>%
dplyr::group_by(ppid_trialn), mapping = aes(x = rotatedX, y = rotatedZ, col = as.factor(heading))) +
geom_path(aes(group = .group), alpha = 0.5) +
geom_path(trajectory, mapping = aes(x = roadX, y = roadZ), linetype = "dashed", col = "black") +
geom_vline(aes(xintercept = 0), size = 1) +
facet_wrap(~ heading, ncol = 4, labeller = labeller(heading = heading.labs)) +
scale_colour_manual(values = wes_palette("Rushmore1")[2:5]) +
theme(legend.position = "none", strip.text.x = element_text(size = 12), plot.title = element_text(size = 15, face = "bold")) +
ylab("z (m)") +
xlab("x (m)") +
xlim(-0.8, 0.8) +
scale_y_continuous(expand = c(0, 0)) +
theme_plot +
theme(plot.title = element_text(size = 20, face = "bold")) +
ggtitle("B") +
ggsave('all_invalid_trajectories.png', plot = last_plot(), width = 16, height = 6, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(false_responses %>%
dplyr::filter(frame <= 150) %>%
dplyr::group_by(ppid_trialn), mapping = aes(x = rotatedX, y = rotatedZ, col = as.factor(heading))) +
geom_path(aes(group = .group), alpha = 0.5) +
geom_path(trajectory, mapping = aes(x = roadX, y = roadZ), linetype = "dashed", col = "black") +
geom_vline(aes(xintercept = 0), size = 1) +
facet_wrap(~ heading, ncol = 4, labeller = labeller(heading = heading.labs)) +
scale_colour_manual(values = wes_palette("Rushmore1")[2:5]) +
theme(legend.position = "none", strip.text.x = element_text(size = 12), plot.title = element_text(size = 15, face = "bold")) +
ylab("z (m)") +
xlab("x (m)") +
xlim(-0.8, 0.8) +
scale_y_continuous(expand = c(0, 0)) +
theme_plot +
theme(plot.title = element_text(size = 30, face = "bold")) +
ggtitle("B") +
ggsave('all_invalid_trajectories.png', plot = last_plot(), width = 22, height = 8, units = 'cm', dpi = 300, type = 'cairo')
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/experiment_1/Data cleaning and modelling/Preprocessing")
ggplot(true_responses %>%
dplyr::filter(pNum == 19) %>%
dplyr::group_by(ppid_trialn), mapping = aes(x = rotatedX, y = rotatedZ, col = as.factor(heading))) +
geom_path(aes(group = .group),alpha = 0.5) +
facet_wrap(~ heading) +
geom_path(trajectory, mapping = aes(x = roadX, y = roadZ), linetype = "dashed", col = "black") +
facet_wrap(~ heading, ncol = 4, labeller = labeller(heading = heading.labs)) +
scale_colour_manual(values = wes_palette("Rushmore1")[2:5]) +
theme(legend.position = "none", strip.text.x = element_text(size = 12), plot.title = element_text(size = 15, face = "bold")) +
geom_vline(aes(xintercept = 0), size = 1) +
scale_y_continuous(expand = c(0, 0)) +
ylab("z (m)") +
xlab("x (m)") +
xlim(-0.8, 0.8) +
theme_plot +
theme(plot.title = element_text(size = 30, face = "bold")) +
ggtitle("A") +
ggsave('example_ppt_valid_trials_trajectories.png', plot = last_plot(), width = 22, height = 8, units = 'cm', dpi = 300, type = 'cairo')
View(magnitudedata)
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
runApp('C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/COVID_planning')
knitr::opts_chunk$set(echo = TRUE)
# rm(list = ls()) # clear work space
library(ggplot2)
library(dplyr)
library(tidyr)
library(Rmisc)
library(sjPlot)
library(sjmisc)
library(lme4)
library(emmeans)
library(broom)
library(wesanderson)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/ttlc_calculation")
thirteen_course <- read.csv("13.0_course_coordinates.csv")
thirteen_sim <- read.csv("13.0_sim_coordinates.csv")
View(thirteen_course)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/ttlc_calculation")
thirteen_course <- read.csv("13.0_course_coordinates.csv", header = FALSE)
thirteen_sim <- read.csv("13.0_sim_coordinates.csv")
View(thirteen_course)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/ttlc_calculation")
thirteen_course <- read.csv("13.0_course_coordinates.csv", header = FALSE)
thirteen_sim <- read.csv("13.0_sim_coordinates.csv", header = FALSE)
setwd("C:/Users/pscmgo/OneDrive for Business/PhD/Project/Experiment_Code/ttlc_calculation")
thirteen_course <- read.csv("13.0_course_coordinates.csv", header = FALSE)
thirteen_sim <- read.csv("13.0_sim_coordinates.csv", header = FALSE)
ggplot() +
geom_line(thirteen_course, aes(x = V1, y = V2))
ggplot() +
geom_line(thirteen_course, mapping = aes(x = V1, y = V2))
ggplot() +
geom_line(thirteen_course, mapping = aes(x = V1, y = V2)) +
geom_line(thirteen_course, mapping = aes(x = V3, y = V4))
ggplot() +
geom_path(thirteen_course, mapping = aes(x = V1, y = V2)) +
geom_path(thirteen_course, mapping = aes(x = V3, y = V4))
ggplot() +
geom_path(thirteen_course, mapping = aes(x = V1, y = V2)) +
geom_path(thirteen_course, mapping = aes(x = V3, y = V4)) +
geom_path(thirteen_course, mapping = aes(x = V5, y = V6))
View(thirteen_sim)
ggplot() +
geom_path(thirteen_course, mapping = aes(x = V1, y = V2)) +
geom_path(thirteen_course, mapping = aes(x = V3, y = V4)) +
geom_path(thirteen_course, mapping = aes(x = V5, y = V6)) +
geom_path(thirteen_sim, mapping = aes(x = V1, y = V2))
